<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.agroup.store.mapper.AccountMapper">
  <resultMap id="BaseResultMap" type="com.agroup.store.domain.Account">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="mail" jdbcType="VARCHAR" property="mail" />
    <result column="recvAddress" jdbcType="VARCHAR" property="recvaddress" />
    <result column="avator" jdbcType="VARCHAR" property="avator" />
    <result column="qq" jdbcType="VARCHAR" property="qq" />
    <result column="money" jdbcType="REAL" property="money" />
    <result column="creditpoint" jdbcType="INTEGER" property="creditPoint" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, `name`, `password`, mail, recvAddress, avator, qq, money, creditpoint
  </sql>
  <select id="selectByExample" parameterType="com.agroup.store.domain.AccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from account
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from account
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.agroup.store.domain.AccountExample">
    delete from account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.agroup.store.domain.Account">
    insert into account (id, `name`, `password`, 
      mail, recvAddress, avator, 
      qq, money, creditpoint)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{mail,jdbcType=VARCHAR}, #{recvaddress,jdbcType=VARCHAR}, #{avator,jdbcType=VARCHAR}, 
      #{qq,jdbcType=VARCHAR}, #{money,jdbcType=REAL}, 3)
  </insert>
  <insert id="insertSelective" parameterType="com.agroup.store.domain.Account">
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="mail != null">
        mail,
      </if>
      <if test="recvaddress != null">
        recvAddress,
      </if>
      <if test="avator != null">
        avator,
      </if>
      <if test="qq != null">
        qq,
      </if>
      <if test="money != null">
        money,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="mail != null">
        #{mail,jdbcType=VARCHAR},
      </if>
      <if test="recvaddress != null">
        #{recvaddress,jdbcType=VARCHAR},
      </if>
      <if test="avator != null">
        #{avator,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        #{qq,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        #{money,jdbcType=REAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.agroup.store.domain.AccountExample" resultType="java.lang.Long">
    select count(*) from account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update account
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        `password` = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.mail != null">
        mail = #{record.mail,jdbcType=VARCHAR},
      </if>
      <if test="record.recvaddress != null">
        recvAddress = #{record.recvaddress,jdbcType=VARCHAR},
      </if>
      <if test="record.avator != null">
        avator = #{record.avator,jdbcType=VARCHAR},
      </if>
      <if test="record.qq != null">
        qq = #{record.qq,jdbcType=VARCHAR},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=REAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update account
    set id = #{record.id,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      `password` = #{record.password,jdbcType=VARCHAR},
      mail = #{record.mail,jdbcType=VARCHAR},
      recvAddress = #{record.recvaddress,jdbcType=VARCHAR},
      avator = #{record.avator,jdbcType=VARCHAR},
      qq = #{record.qq,jdbcType=VARCHAR},
      money = #{record.money,jdbcType=REAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.agroup.store.domain.Account">
    update account
    <set>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="mail != null">
        mail = #{mail,jdbcType=VARCHAR},
      </if>
      <if test="recvaddress != null">
        recvAddress = #{recvaddress,jdbcType=VARCHAR},
      </if>
      <if test="avator != null">
        avator = #{avator,jdbcType=VARCHAR},
      </if>
      <if test="qq != null">
        qq = #{qq,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=REAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.agroup.store.domain.Account">
    update account
    set `name` = #{name,jdbcType=VARCHAR},
      `password` = #{password,jdbcType=VARCHAR},
      mail = #{mail,jdbcType=VARCHAR},
      recvAddress = #{recvaddress,jdbcType=VARCHAR},
      avator = #{avator,jdbcType=VARCHAR},
      qq = #{qq,jdbcType=VARCHAR},
      money = #{money,jdbcType=REAL}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <insert id="insertPurchaseRecordWithoutEffect" >
    insert into purchaserecord values (#{accountId},#{goodsId},'false', null, null, null);
  </insert>

  <update id="updatePurchaseRecord">
    update purchaserecord set effective='true' where buyerId= #{accountId} and goodsId=#{goodsId}
  </update>

  <update id="updateSupplyRecord">
    update supplyrecord set effective='true' where accountid= #{accountId} and desiredgoodsid=#{desiredGoodsId}
  </update>

  <resultMap id="goodsMap" type="com.agroup.store.resp.GoodsPurchaseRecordResp">
    <id column="buyerId"></id>
    <result column="goodsId" property="id"></result>
    <result column="name" property="name"></result>
    <result column="description" property="description"></result>
    <result column="img" property="img"></result>
    <result column="category_id" property="categoryId"></result>
    <result column="account_id" property="accountId"></result>
    <result column="price" property="price"></result>
    <result column="effective" property="effective"></result>

  </resultMap>
  
  <select id="selectGoodsByAccountId" parameterType="java.lang.Integer" resultMap="goodsMap">
    select * from purchaserecord join goods g on g.id = purchaseRecord.goodsId where buyerId= #{accountId}
  </select>

  <insert id="insertSupplyRecord" >
    insert into supplyrecord (accountid, desiredgoodsid, effective) values (#{accountId},#{desiredgoodsId}, "false");
  </insert>

  <select id="getSupplyingGoodsByAccountId" parameterType="java.lang.Integer" resultType="com.agroup.store.domain.DesiredGoods">
    select g.*
    from (
         select *
         from supplyrecord
         where accountid = #{accountid}
           ) as s join desiredgoods g on s.desiredgoodsid = g.id
  </select>

  <select id="getSupplyingAccountByDesiredGoodsId" parameterType="java.lang.Integer" resultType="com.agroup.store.domain.Account">
    select a.*
    from (
           select *
           from supplyrecord
           where desiredgoodsid = #{desiredgoodsid}
         ) as s join account a on s.accountid = a.id
  </select>

  <select id="getBuyersByGoodsId" parameterType="java.lang.Integer" resultType="com.agroup.store.domain.Account">
    select a.*
    from (
           select *
           from purchaserecord
           where goodsid = #{goodsid}
         ) as s join account a on s.buyerid = a.id
  </select>

  <delete id="deletePurchaseRecord" parameterType="com.agroup.store.req.QuitBuyReq">
    delete from purchaserecord where buyerId = #{buyerId} and goodsId = #{goodsId}
  </delete>

  <select id="selectPurchaseRecordByPid" resultType="com.agroup.store.domain.PurchaseRecord">
        select *
        from purchaseRecord
        where buyerId = #{buyerId} and goodsId = #{goodsId}
  </select>

  <select id="selectSupplyRecordByPid" resultType="com.agroup.store.domain.SupplyRecord">
    select *
    from supplyrecord
    where accountid = #{sellerId} and desiredgoodsid = #{desiredGoodsId}
  </select>

  <update id="updateAvatar">
    update account set avator = #{filename, jdbcType=VARCHAR} where id=#{accountId, jdbcType=INTEGER}
  </update>

  <update id="chargeMoney">
    update account set money=IF(money is null, #{chargeAmount, jdbcType=REAL}, money+#{chargeAmount, jdbcType=REAL}) where id=#{accountId, jdbcType=INTEGER}
  </update>

  <select id="getMoney" resultType="java.lang.Float">
    select money from account where id=#{accountId, jdbcType=INTEGER}
  </select>

  <update id="updateMoney">
    update account set money=#{amount, jdbcType=REAL} where id=#{accountId, jdbcType=INTEGER}
  </update>

  <select id="getAccountIdByGoodsId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select account_id from goods where id = #{goodsId}
  </select>

  <select id="getAccountIdByDesiredGoodsId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    select account_id from desiredgoods where id = #{desiredGoodsId}
  </select>

  <update id="decrease1CreditPoint" parameterType="java.lang.Integer">
    update account set creditpoint = creditpoint - 1 where id = #{Id}
  </update>

  <update id="increase1CreditPoint" parameterType="java.lang.Integer">
    update account set creditpoint = least(creditpoint + 1, 3)  where id = #{id}
  </update>

  <insert id="addComplainRecord" >
    insert into complainRecord value (#{id1},#{id2},#{date})
  </insert>

  <select id="checkIsAbleToComplain" resultType="java.lang.Integer">
    select count(*)from complainRecord where ((accountId1 = #{id1} and accountId2 = #{id2})
    or (accountId1 = #{id2} and accountId2 = #{id1}) ) and  (7*24*60*60) > timediff(#{date},date)
  </select>

</mapper>